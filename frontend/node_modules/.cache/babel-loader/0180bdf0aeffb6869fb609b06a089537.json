{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alvin\\\\OneDrive\\\\Documents\\\\CodeProjects\\\\EventManagerReact\\\\frontend\\\\src\\\\Component\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport { getUser, getToken, setUserSession, resetUserSession } from './Service/AuthService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loginURL = \"https://xhetcinp85.execute-api.us-west-1.amazonaws.com/prod/login\";\nconst verifyTokenAPIURL = \"https://xhetcinp85.execute-api.us-west-1.amazonaws.com/prod/verify\";\nexport const Login = () => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [username, setUsername] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const [isAuthenticating, setAuthenticating] = useState(true);\n  const token = getToken(); //check for existing session\n\n  useEffect(() => {\n    if (!token) {\n      setAuthenticating(false);\n    }\n\n    const requestConfig = {\n      headers: {\n        'x-api-key': 'n4mlBUgJbT3YSFHliX5tTeakXeB760x9GrdrVJIi'\n      }\n    };\n    const requestBody = {\n      user: getUser(),\n      token: token\n    };\n    axios.post(verifyTokenAPIURL, requestBody, requestConfig).then(response => {\n      setUserSession(response.data.user, response.data.token);\n      alert(\"Session still exists.\");\n      navigate(\"/home\");\n    }).catch(() => {\n      resetUserSession();\n    }).finally(() => {\n      setAuthenticating(false);\n    });\n  }, []);\n\n  if (isAuthenticating) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: \"Authenticating...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (username.trim() === '' || password.trim() === '') {\n      setError('All fields are required');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    const requestConfig = {\n      headers: {\n        'x-api-key': 'n4mlBUgJbT3YSFHliX5tTeakXeB760x9GrdrVJIi'\n      }\n    };\n    const requestBody = {\n      username: username,\n      password: password\n    };\n\n    try {\n      const response = await axios.post(loginURL, requestBody, requestConfig);\n      setUserSession(response.data.users, response.data.token);\n      console.log(\"Before navigate\");\n      navigate(\"/home/ac\");\n      console.log(\"After navigate\");\n    } catch (error) {\n      setError('Invalid username or password');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const goRegister = () => {\n    navigate(\"/register\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Welcome to Event Manager!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Username: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        placeholder: \"Enter a username\",\n        onChange: _ref => {\n          let {\n            target\n          } = _ref;\n          return setUsername(target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          placeholder: \"Enter a password\",\n          onChange: _ref2 => {\n            let {\n              target\n            } = _ref2;\n            return setPassword(target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn--alt\",\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Logging in...' : 'Login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn--alt\",\n        onClick: goRegister,\n        children: \"Register Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"1PPPU5FJsJqs2g/Fl83dLZzTa3A=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Alvin/OneDrive/Documents/CodeProjects/EventManagerReact/frontend/src/Component/Login.js"],"names":["React","useEffect","useState","axios","Routes","Route","useNavigate","getUser","getToken","setUserSession","resetUserSession","loginURL","verifyTokenAPIURL","Login","email","setEmail","password","setPassword","username","setUsername","loading","setLoading","error","setError","navigate","isAuthenticating","setAuthenticating","token","requestConfig","headers","requestBody","user","post","then","response","data","alert","catch","finally","handleSubmit","e","preventDefault","trim","users","console","log","goRegister","target","value","color"],"mappings":"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","sourcesContent":["import React, { useEffect,useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Routes, Route, useNavigate } from 'react-router-dom';\r\nimport { getUser, getToken, setUserSession, resetUserSession } from './Service/AuthService';\r\n\r\nconst loginURL = \"https://xhetcinp85.execute-api.us-west-1.amazonaws.com/prod/login\";\r\nconst verifyTokenAPIURL = \"https://xhetcinp85.execute-api.us-west-1.amazonaws.com/prod/verify\";\r\n\r\nexport const Login = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [username, setUsername] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n  const [isAuthenticating, setAuthenticating] = useState(true);\r\n  const token = getToken();\r\n\r\n  //check for existing session\r\n  useEffect(() => {\r\n    if (!token) {\r\n      setAuthenticating(false);\r\n    }\r\n\r\n    const requestConfig = {\r\n      headers: {\r\n        'x-api-key': 'n4mlBUgJbT3YSFHliX5tTeakXeB760x9GrdrVJIi',\r\n      },\r\n    };\r\n    const requestBody = {\r\n      user: getUser(),\r\n      token: token,\r\n    };\r\n\r\n    axios\r\n      .post(verifyTokenAPIURL, requestBody, requestConfig)\r\n      .then((response) => {\r\n        setUserSession(response.data.user, response.data.token);\r\n        alert(\"Session still exists.\");\r\n        navigate(\"/home\");\r\n      })\r\n      .catch(() => {\r\n        resetUserSession();\r\n      })\r\n      .finally(() => {\r\n        setAuthenticating(false);\r\n      });\r\n  }, []);\r\n\r\n  if (isAuthenticating) {\r\n    return <div className=\"content\">Authenticating...</div>;\r\n  }\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    if (username.trim() === '' || password.trim() === '') {\r\n      setError('All fields are required');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    const requestConfig = {\r\n      headers: {\r\n        'x-api-key': 'n4mlBUgJbT3YSFHliX5tTeakXeB760x9GrdrVJIi'\r\n      }\r\n    }\r\n\r\n    const requestBody = {\r\n      username: username,\r\n      password: password\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(loginURL, requestBody, requestConfig);\r\n      setUserSession(response.data.users, response.data.token);\r\n      console.log(\"Before navigate\");\r\n      navigate(\"/home/ac\");\r\n      console.log(\"After navigate\");\r\n    } catch (error) {\r\n      setError('Invalid username or password');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const goRegister = () => {\r\n    navigate(\"/register\");\r\n  };\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div>\r\n        Welcome to Event Manager!\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"username\">Username: </label>\r\n        <input\r\n          type=\"text\"\r\n          value={username}\r\n          placeholder=\"Enter a username\"\r\n          onChange={({ target }) => setUsername(target.value)}\r\n        />\r\n        <div>\r\n          <label htmlFor=\"password\">Password: </label>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            placeholder=\"Enter a password\"\r\n            onChange={({ target }) => setPassword(target.value)}\r\n          />\r\n        </div>\r\n        {error && <div style={{ color: 'red' }}>{error}</div>}\r\n        <button className='btn btn--alt' type=\"submit\" disabled={loading}>\r\n          {loading ? 'Logging in...' : 'Login'}\r\n        </button>\r\n        <button className='btn btn--alt' onClick={goRegister}>Register Now</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}